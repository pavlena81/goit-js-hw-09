{"mappings":"oeAiBA,IAAAA,EAAAC,EAAA,SAcA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACvC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC1BC,YAAW,KACLN,GACFI,EAAQ,CAAEG,SAAAT,EAAUU,MAAAT,IAEpBM,EAAO,CAAEE,SAAAT,EAAUU,MAAAT,MAEpBA,MAEFU,MAAK,EAACF,SAAEA,EAAQC,MAAEA,KACVb,EAAAe,OAAOC,QAAQ,uBAAqBJ,QAAiBC,SAE7DI,OAAM,EAACL,SAAEA,EAAQC,MAAEA,KACXb,EAAAe,OAAOG,QAAQ,sBAAoBN,QAAeC,SA3BhDM,SAASC,cAAc,SAE/BC,iBAAiB,UA6BxB,SAAyBC,GACvBA,EAAEC,iBAED,IAAIV,EAAQW,OAAOF,EAAEG,cAAcZ,MAAMa,OACrCC,EAAOH,OAAOF,EAAEG,cAAcE,KAAKD,OACnCE,EAASJ,OAAOF,EAAEG,cAAcG,OAAOF,OAE5C,KAAIb,GAAS,GAAKc,GAAO,GAAKC,EAAS,GAMrC,OAAO5B,EAAAe,OAAOc,QAAQ,kBALtB,IAAK,IAAIjB,EAAW,EAAGA,GAAYgB,EAAQhB,GAAY,EACvDV,EAAcU,EAAUC,GACxBA,GAASc","sources":["src/js/03-promises.js"],"sourcesContent":["\n// Напиши скрипт, который при сабмите формы вызывает функцию\n// createPromise(position, delay) столько раз,\n//   сколько ввели в поле amount.При каждом вызове передай \n//    номер создаваемого промиса(position) и задержку \n//    учитывая введенную пользователем первую задержку(delay)\n//     и шаг(step).\n\n\n// Дополни код функции createPromise так, чтобы она \n// возвращала один промис, который выполянется или \n// отклоняется через delay времени.Значением промиса \n// должен быть объект, в котором будут свойства position и \n// delay со значениями одноименных параметров.\n// Используй начальный код функции для выбора того,\n//   что нужно сделать с промисом - выполнить или отклонить.\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n  \nformEl.addEventListener('submit', onCreatePromise);\n// const makePromise = () => {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => resolve(position), delay);\n//   });\n// }\n// makePromise()\n//   .than(result => console.log(result))\n//   .catch(error => console.log(error));\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } \n        reject({ position, delay })\n      \n    }, delay)\n  })\n    .then(({ position, delay }) => {\n      return Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      return Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n}\nfunction onCreatePromise(e) {\n  e.preventDefault();\n\n   let delay = Number(e.currentTarget.delay.value);\n   let step = Number(e.currentTarget.step.value);\n   let amount = Number(e.currentTarget.amount.value);\n\n  if (delay >= 0 && step >=0 && amount > 0) {\n    for (let position = 1; position <= amount; position += 1 ){\n    createPromise(position, delay);\n    delay += step;\n  }\n  } else {\n    return Notify.warning('input value >0');\n  }\n  \n }\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position1","delay1","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","position","delay","then","Notify","success","catch","failure","document","querySelector","addEventListener","e","preventDefault","Number","currentTarget","value","step","amount","warning"],"version":3,"file":"03-promises.782b14f3.js.map"}